import argparse
import os
from typing import List, Tuple

import numpy as np
from openmm.app import ForceField

from OGEN.files.reader import read_molecule
from OGEN.openmm_api import get_charges_and_positions, mol_to_openmm
from OGEN.MultiWFN.Multipoles import get_multipoles
from OGEN.utils import get_coordinates, get_dipole, get_quadrupole


def calculate_multipole_error(wavefunction_path: str,
                              ff: ForceField,
                              preserve=False) -> Tuple[float, float]:

    name, _ = os.path.splitext(os.path.basename(wavefunction_path))
    multipole_name = f'{name}_multipoles'

    structure = read_molecule(wavefunction_path)

    topology = mol_to_openmm(structure)

    atomic_coordinates = get_coordinates(structure)

    charges, positions = get_charges_and_positions(topology,
                                                   atomic_coordinates, ff)

    dipole = get_dipole(positions, charges)
    quadrupole = get_quadrupole(positions, charges)
    # octapole = get_octopole(positions, charges)

    true_multipoles = get_multipoles(wavefunction_path, preserve,
                                     multipole_name)

    return (
        np.linalg.norm(dipole - true_multipoles['dipole']),
        np.linalg.norm(quadrupole - true_multipoles['quadrupole']),
    )


def format_line(
    name,
    dipole_error,
    quadrupole_error,
) -> str:
    if isinstance(dipole_error, str):
        return f'{name:20}{dipole_error:20}{quadrupole_error:20}'
    else:
        return f'{name:20}{dipole_error:<20.5g}{quadrupole_error:<20.5g}'


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        prog='calc_multipoles_error',
        description=('Calculate multipole errors from '
                     'wavefunction and Openmm forcefield'))

    parser.add_argument(
        'wavefunctions',
        help='fchk or any other wavefunction file for MultiWFN',
        nargs='+',
    )
    parser.add_argument(
        '-f',
        '--forcefields',
        help='openmm-compatible forcefields',
        nargs='+',
        required=True,
    )
    parser.add_argument('--preserve',
                        action='store_true',
                        help='whether to save data generated by MultiWFN '
                        '(may be usefull for multiple calculations in a row)')

    args = parser.parse_args()

    wavefunctions: List[str] = args.wavefunctions
    forcefields: List[str] = args.forcefields
    preserve: bool = args.preserve

    ff = ForceField(*forcefields)

    print(format_line('Name', 'Dipole error', 'Quadrupole error'))

    for wavefunction in wavefunctions:
        dipole_error, quadrupole_error = calculate_multipole_error(
            wavefunction,
            ff,
            preserve,
        )

        name, _ = os.path.splitext(os.path.basename(wavefunction))

        print(format_line(name, dipole_error, quadrupole_error))
